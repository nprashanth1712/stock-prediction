# -*- coding: utf-8 -*-
"""
Created on Wed May  4 17:05:07 2022

@author: navug
"""
import streamlit as st
from datetime import date

import yfinance as yf
from fbprophet import Prophet
from fbprophet.plot import plot_plotly
from plotly import graph_objs as go

START = "2015-01-01"
TODAY = date.today().strftime("%Y-%m-%d")

st.title('Stock Prediction App')

stocks = ('UVXY','GOOG', 'AAPL', 'MSFT', 'ADANIGREEN.NS','INFY', 'TTM','TWTR'
    
 'SVXY',
 'YESBANK.NS',
 'TATAINVEST.NS',
 'UVIX',
 'ARKX',
 'AAAU',
 'ACIO',
 'ACSI',
 'ACWV',
 'ADFI',
 'ADME',
 'AESR',
 'AFIF',
 'AGT',
 'ALFA',
 'AMER',
 'APRZ',
 'APXH',
 'ARCM',
 'ARKG',
 'ARKQ',
 'ATMP',
 'AUGZ',
 'AVDG',
 'AVDR',
 'BALT',
 'BAPR',
 'BAUG',
 'BBAX',
 'BBCA',
 'BBEU',
 'BBIN',
 'BBJP',
 'BBRE',
 'BBSA',
 'BBUS',
 'BDEC',
 'BFEB',
 'BGLD',
 'BJAN',
 'BJUL',
 'BJUN',
 'BLDG',
 'BLKC',
 'BMAR',
 'BMAY',
 'BNOV',
 'BOB',
 'BOCT',
 'BOSS',
 'BSEP',
 'BUFB',
 'BUFD',
 'BUFF',
 'BUFG',
 'BUFR',
 'BUFT',
 'BUYZ',
 'CALF',
 'CBOE',
 'CEFS',
 'CEMB',
 'CFCV',
 'CLSE',
 'CNYA',
 'COWZ',
 'CSM',
 'CTRU',
 'CVAR',
 'DALT',
 'DAPR',
 'DAUG',
 'DBJA',
 'DBOC',
 'DDEC',
 'DDLS',
 'DDWM',
 'DECZ',
 'DFEB',
 'DFHY',
 'DFIC',
 'DFIS',
 'DFND',
 'DFNL',
 'DFNV',
 'DFRA',
 'DIHP',
 'DINT',
 'DISV',
 'DIVB',
 'DJAN',
 'DJUL',
 'DJUN',
 'DMAR',
 'DMAY',
 'DNOV',
 'DOCT',
 'DRSK',
 'DSEP',
 'DSJA',
 'DSOC',
 'DUDE',
 'DURA',
 'DUSA',
 'DWLD',
 'EAOA',
 'EAOK',
 'EAOM',
 'EAOR',
 'ECH',
 'EDEN',
 'EEMV',
 'EFAD',
 'EFAV',
 'EFG',
 'EFNL',
 'EFV',
 'EGIS',
 'EMDV',
 'EMGF',
 'EMHY',
 'EMTL',
 'ENOR',
 'EOPS',
 'EPRF',
 'ESCR',
 'ESEB',
 'ESG',
 'ESGG',
 'ESGV',
 'ESHY',
 'ESML',
 'EUCG',
 'EUDV',
 'EWGS',
 'EWUS',
 'EYLD',
 'EZU',
 'FAIL',
 'FAPR',
 'FAUG',
 'FBCG',
 'FBCV',
 'FCLD',
 'FCPI',
 'FCTR',
 'FDEC',
 'FDEM',
 'FDEV',
 'FDG',
 'FDHT',
 'FDRV',
 'FEBZ',
 'FEDX',
 'FFEB',
 'FFHG',
 'FFSG',
 'FFTG',
 'FFTI',
 'FGRO',
 'FIBR',
 'FJAN',
 'FJUL',
 'FJUN',
 'FLBL',
 'FLDR',
 'FLHY',
 'FLIA',
 'FLOT',
 'FLQL',
 'FLQM',
 'FLQS',
 'FLTN',
 'FLV',
 'FMAG',
 'FMAR',
 'FMAY',
 'FMIL',
 'FNOV',
 'FOCT',
 'FOMO',
 'FPAG',
 'FPFD',
 'FPRO',
 'FRDM',
 'FRNW',
 'FSEP',
 'FSMO',
 'FUNL',
 'FYLD',
 'GAA',
 'GCLN',
 'GCOW',
 'GDE',
 'GDMN',
 'GEMD',
 'GHTA',
 'GHYG',
 'GLDB',
 'GLOV',
 'GMOM',
 'GOVT',
 'GOVZ',
 'GPAL',
 'GSEE',
 'GSEW',
 'GSID',
 'GSST',
 'GSUS',
 'GTIP',
 'GVAL',
 'GVI',
 'HAUS',
 'HCRB',
 'HEEM',
 'HEET',
 'HEFA',
 'HEGD',
 'HELX',
 'HFGO',
 'HSRT',
 'HSUN',
 'HYBL',
 'HYD',
 'HYDB',
 'HYHG',
 'HYIN',
 'HYMU',
 'HYXU',
 'IAGG',
 'IAUF',
 'IBHB',
 'IBHC',
 'IBHD',
 'IBHE',
 'IBHF',
 'IBHG',
 'IBHH',
 'IBHI',
 'IBML',
 'IBMM',
 'IBMN',
 'IBMO',
 'IBMP',
 'IBMQ',
 'ICF',
 'ICOW',
 'ICSH',
 'ICVT',
 'IDHD',
 'IDME',
 'IDV',
 'IECS',
 'IEDI',
 'IEFA',
 'IEFN',
 'IEHS',
 'IEIH',
 'IEME',
 'IEO',
 'IETC',
 'IFRA',
 'IGE',
 'IGEB',
 'IGHG',
 'IGLD',
 'IGRO',
 'IGV',
 'IMFL',
 'IMLP',
 'IMOM',
 'INDA',
 'IPDP',
 'IPPP',
 'IQDG',
 'IQM',
 'ISVL',
 'ITA',
 'ITB',
 'ITM',
 'IVAL',
 'IVDG',
 'IVLC',
 'IVRA',
 'IVSG',
 'IYJ',
 'IYLD',
 'IYT',
 'IYZ',
 'IZRL',
 'JANZ',
 'JBBB',
 'JCPB',
 'JCPI',
 'JEMA',
 'JMST',
 'JMUB',
 'JPHY',
 'JPIB',
 'JPST',
 'JULZ',
 'JUNZ',
 'KAPR',
 'KJAN',
 'KJUL',
 'KNG',
 'KNGS',
 'KOCT',
 'KWT',
 'LEAD',
 'LIV',
 'LKOR',
 'LQDI',
 'LUXE',
 'LVHI',
 'LYFE',
 'MAAX',
 'MAGA',
 'MAMB',
 'MARZ',
 'MAYZ',
 'MBBB',
 'MBCC',
 'MBND',
 'MBNE',
 'MDEV',
 'MEAR',
 'MFUL',
 'MIG',
 'MINN',
 'MLN',
 'MOAT',
 'MOHR',
 'MOTE',
 'MOTG',
 'MOTI',
 'MPRO',
 'MRGR',
 'MRSK',
 'MSMR',
 'MSTB',
 'MSTQ',
 'MSVX',
 'MTUM',
 'NAPR',
 'NEAR',
 'NETZ',
 'NJAN',
 'NJUL',
 'NOBL',
 'NOCT',
 'NOVZ',
 'NUDM',
 'NUDV',
 'NUEM',
 'NULC',
 'NULG',
 'NULV',
 'NUMG',
 'NUMV',
 'NURE',
 'NUSC',
 'OBND',
 'OCTZ',
 'OEUR',
 'OGIG',
 'OILK',
 'OMFL',
 'OMFS',
 'OSCV',
 'OUSA',
 'OUSM',
 'PAPR',
 'PAUG',
 'PAVE',
 'PAWZ',
 'PBDM',
 'PBEE',
 'PBND',
 'PBSM',
 'PBTP',
 'PBUS',
 'PDEC',
 'PEX',
 'PFEB',
 'PICK',
 'PJAN',
 'PJUL',
 'PJUN',
 'PLRG',
 'PLTL',
 'PMAR',
 'PMAY',
 'PNOV',
 'POCT',
 'PRNT',
 'PSCJ',
 'PSCQ',
 'PSCW',
 'PSCX',
 'PSEP',
 'PSFD',
 'PSFF',
 'PSFJ',
 'PSFM',
 'PSFO',
 'PSMB',
 'PSMC',
 'PSMD',
 'PSMG',
 'PSMJ',
 'PSMM',
 'PSMO',
 'PSMR',
 'PTEU',
 'PTLC',
 'PTMC',
 'PTNQ',
 'PUNK',
 'PWS',
 'PXUS',
 'QCON',
 'QDEC',
 'QJUN',
 'QLC',
 'QMAR',
 'QMOM',
 'QPFF',
 'QSPT',
 'QTAP',
 'QTJA',
 'QTJL',
 'QTOC',
 'QUAL',
 'QVAL',
 'RDFI',
 'REC',
 'REGL',
 'REM',
 'RESD',
 'RESE',
 'ROCI',
 'RODE',
 'RODI',
 'ROMO',
 'RPHS',
 'RSEE',
 'RSX',
 'RSXJ',
 'RTAI',
 'RULE',
 'RYLD',
 'SATO',
 'SECT',
 'SEPZ',
 'SFIG',
 'SHAG',
 'SHYD',
 'SLVP',
 'SMB',
 'SMDV',
 'SMI',
 )
selected_stock = st.selectbox(label='Select the company name for prediction', options=stocks)

n_years = st.radio('Years of prediction:',options=(1,2,3,4))
period = n_years * 365


@st.cache
def load_data(ticker):
    data = yf.download(ticker, START, TODAY)
    data.reset_index(inplace=True)
    return data

	
data_load_state = st.text('Loading data...')
data = load_data(selected_stock)
data_load_state.text('Loading data... done!')

st.subheader('Raw data')
st.write(data.tail())

# Plot raw data
def plot_raw_data():
	fig = go.Figure()
	fig.add_trace(go.Scatter(x=data['Date'], y=data['Open'], name="stock_open"))
	fig.add_trace(go.Scatter(x=data['Date'], y=data['Close'], name="stock_close"))
	fig.layout.update(title_text='Time Series data with Rangeslider', xaxis_rangeslider_visible=True)
	st.plotly_chart(fig)
	
plot_raw_data()


# Predict forecast with Prophet.
df_train = data[['Date','Close']]
df_train = df_train.rename(columns={"Date": "ds", "Close": "y"})

m = Prophet()
m.fit(df_train)
future = m.make_future_dataframe(periods=period)
forecast = m.predict(future)

# Show and plot forecast
st.subheader('Forecast data')
st.write(forecast.tail())
    
st.subheader(f'Forecast plot for {n_years} years')
fig1 = plot_plotly(m, forecast,xlabel='Time',ylabel='stock price')

st.plotly_chart(fig1)

st.write("Forecast components")
fig2 = m.plot_components(forecast)
st.write(fig2)
